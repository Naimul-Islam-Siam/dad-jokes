{"version":3,"sources":["Joke.js","JokesList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","color","emoji","animation","className","onClick","upvote","style","borderColor","getModification","downvote","text","getAnimation","aria-label","Component","JokesList","state","jokes","JSON","parse","window","localStorage","getItem","seenJokes","Set","map","j","handleClick","bind","length","setState","loading","getJokes","numJokesToGet","axios","get","headers","Accept","response","newJoke","data","joke","has","push","id","uuid","st","setItem","stringify","alert","delta","sort","a","b","key","handleVotes","spinner","src","alt","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2YAGqBA,G,sMAEf,OAAIC,KAAKC,MAAMC,OAAS,GACd,CAAEC,MAAO,UAAWC,MAAO,uCAC1BJ,KAAKC,MAAMC,OAAS,GACrB,CAAEC,MAAO,UAAWC,MAAO,kBAC1BJ,KAAKC,MAAMC,OAAS,EACrB,CAAEC,MAAO,UAAWC,MAAO,gBAC1BJ,KAAKC,MAAMC,OAAS,EACrB,CAAEC,MAAO,UAAWC,MAAO,+BAC1BJ,KAAKC,MAAMC,OAAS,EACrB,CAAEC,MAAO,UAAWC,MAAO,sBAC1BJ,KAAKC,MAAMC,OAAS,EACrB,CAAEC,MAAO,UAAWC,MAAO,kBAE3B,CAAED,MAAO,UAAWC,MAAO,iB,qCAKrC,OAAyB,KAArBJ,KAAKC,MAAMC,MAAqB,CAAEG,UAAW,8BACxB,KAArBL,KAAKC,MAAMC,MAAqB,CAAEG,UAAW,8BACxB,IAArBL,KAAKC,MAAMC,MAAoB,CAAEG,UAAW,8BACvB,IAArBL,KAAKC,MAAMC,MAAoB,CAAEG,UAAW,8BACvB,IAArBL,KAAKC,MAAMC,MAAoB,CAAEG,UAAW,+BACtB,IAAtBL,KAAKC,MAAMC,MAAqB,CAAEG,UAAW,8BACrC,CAAEA,UAAW,U,+BAIzB,OACG,yBAAKC,UAAU,QACZ,yBAAKA,UAAU,aACZ,uBAAGA,UAAU,+BAA+BC,QAASP,KAAKC,MAAMO,SAChE,0BAAMF,UAAU,aAAaG,MAAO,CAAEC,YAAaV,KAAKW,kBAAkBR,QAAUH,KAAKC,MAAMC,OAC/F,uBAAGI,UAAU,mCAAmCC,QAASP,KAAKC,MAAMW,YAGvE,yBAAKN,UAAU,aACXN,KAAKC,MAAMY,MAGf,yBAAKP,UAAU,cACZ,uBAAGA,UAAWN,KAAKW,kBAAkBP,MAAOK,MAAO,CAAEJ,UAAWL,KAAKc,eAAeT,WAAaU,aAAW,wC,GA3CzFC,cCGbC,E,YAKlB,WAAYhB,GAAQ,IAAD,8BAChB,4CAAMA,KACDiB,MAAQ,CAEVC,MAAOC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,UAAY,OAG7D,EAAKC,UAAY,IAAIC,IAAI,EAAKR,MAAMC,MAAMQ,KAAI,SAAAC,GAAC,OAAIA,EAAEf,SAErD,EAAKgB,YAAc,EAAKA,YAAYC,KAAjB,gBATH,E,iFAagB,IAA5B9B,KAAKkB,MAAMC,MAAMY,SAClB/B,KAAKgC,SAAS,CAAEC,SAAS,IACzBjC,KAAKkC,c,6HAMDf,EAAQ,G,YACLA,EAAMY,OAAS/B,KAAKC,MAAMkC,e,2CACTC,IAAMC,IAAI,8BAA+B,CAAEC,QAAS,CAAEC,OAAQ,uB,OAA/EC,E,OACAC,EAAUD,EAASE,KAAKC,KAEvB3C,KAAKyB,UAAUmB,IAAIH,IACrBtB,EAAM0B,KAAK,CAAEC,GAAIC,MAAQlC,KAAM4B,EAASvC,MAAO,I,uBAGrDF,KAAKgC,UAAS,SAAAgB,GAAE,MAAK,CAClBf,SAAS,EAAOd,MAAM,GAAD,mBAAM6B,EAAG7B,OAAUA,OACvC,kBAAMG,OAAOC,aAAa0B,QAAQ,QAAS7B,KAAK8B,UAAU,EAAKhC,MAAMC,W,kDAGzEgC,MAAM,EAAD,IACLnD,KAAKgC,SAAS,CAAEC,SAAS,I,+FAK5BjC,KAAKgC,SAAS,CAAEC,SAAS,GAAQjC,KAAKkC,Y,kCAG7BY,EAAIM,GAAQ,IAAD,OACpBpD,KAAKgC,UAAS,SAAAgB,GAAE,MAAK,CAClB7B,MAAO6B,EAAG7B,MAAMQ,KAAI,SAAAC,GAAC,OAClBA,EAAEkB,KAAOA,EAAT,eAAmBlB,EAAnB,CAAsB1B,MAAO0B,EAAE1B,MAAQkD,IAAUxB,SAEnD,kBAAMN,OAAOC,aAAa0B,QAAQ,QAAS7B,KAAK8B,UAAU,EAAKhC,MAAMC,a,+BAIlE,IAAD,OACFA,EAAQnB,KAAKkB,MAAMC,MAAMkC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAErD,MAAQoD,EAAEpD,SAAOyB,KAAI,SAAAC,GAAC,OACjE,kBAAC,EAAD,CACG4B,IAAK5B,EAAEkB,GACPjC,KAAMe,EAAEf,KACRX,MAAO0B,EAAE1B,MACTM,OAAQ,kBAAM,EAAKiD,YAAY7B,EAAEkB,GAAI,IACrClC,SAAU,kBAAM,EAAK6C,YAAY7B,EAAEkB,IAAK,SAI1CY,EAAU,yBAAKpD,UAAU,qBAC1B,uBAAGA,UAAU,+BACb,wBAAIA,UAAU,mBAAd,eAGH,OACG,yBAAKA,UAAU,aACZ,yBAAKA,UAAU,qBACZ,wBAAIA,UAAU,mBAAkB,qCAAhC,UACA,yBAAKqD,IAAI,6FAA6FC,IAAI,kBAC1G,4BAAQtD,UAAU,oBAAoBC,QAASP,KAAK6B,aAApD,eAEH,yBAAKvB,UAAU,mBACXN,KAAKkB,MAAMe,QACT,yBAAK3B,UAAU,+BACXoD,GAEF,6BAAMvC,S,GAtFaH,aAAlBC,EACX4C,aAAe,CACnB1B,cAAe,ICIN2B,MARf,WACE,OACE,yBAAKxD,UAAU,OACb,kBAAC,EAAD,QCKcyD,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6becf69f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Joke.css';\r\n\r\nexport default class Joke extends Component {\r\n   getModification() {\r\n      if (this.props.votes >= 15) {\r\n         return { color: \"#4caf50\", emoji: \"em em-rolling_on_the_floor_laughing\" };\r\n      } else if (this.props.votes >= 12) {\r\n         return { color: \"#8bc34a\", emoji: \"em em-laughing\" };\r\n      } else if (this.props.votes >= 9) {\r\n         return { color: \"#cddc39\", emoji: \"em em-smiley\" };\r\n      } else if (this.props.votes >= 6) {\r\n         return { color: \"#ffeb3b\", emoji: \"em em-slightly_smiling_face\" };\r\n      } else if (this.props.votes >= 3) {\r\n         return { color: \"#ffc107\", emoji: \"em em-neutral_face\" };\r\n      } else if (this.props.votes >= 0) {\r\n         return { color: \"#ff9800\", emoji: \"em em-confused\" };\r\n      } else {\r\n         return { color: \"#f44336\", emoji: \"em em-angry\" };\r\n      }\r\n   }\r\n\r\n   getAnimation() {\r\n      if (this.props.votes === 15) return { animation: \"spin 0.7s ease -in -out 0s\" }\r\n      if (this.props.votes === 12) return { animation: \"spin 0.7s ease -in -out 0s\" }\r\n      if (this.props.votes === 9) return { animation: \"spin 0.7s ease -in -out 0s\" }\r\n      if (this.props.votes === 6) return { animation: \"spin 0.7s ease -in -out 0s\" }\r\n      if (this.props.votes === 3) return { animation: \"spin 0.7s ease -in -out 0s\" }\r\n      if (this.props.votes === -1) return { animation: \"spin 0.7s ease -in -out 0s\" }\r\n      else return { animation: \"none\" }\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"Joke\">\r\n            <div className=\"Joke-btns\">\r\n               <i className=\"fas fa-arrow-up Joke-btns-up\" onClick={this.props.upvote} />\r\n               <span className=\"Joke-votes\" style={{ borderColor: this.getModification().color }}>{this.props.votes}</span>\r\n               <i className=\"fas fa-arrow-down Joke-btns-down\" onClick={this.props.downvote} />\r\n            </div>\r\n\r\n            <div className=\"Joke-text\">\r\n               {this.props.text}\r\n            </div>\r\n\r\n            <div className=\"Joke-emoji\">\r\n               <i className={this.getModification().emoji} style={{ animation: this.getAnimation().animation }} aria-label=\"ROLLING ON THE FLOOR LAUGHING\"></i>\r\n            </div>\r\n         </div>\r\n      );\r\n   };\r\n};","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport uuid from 'uuid/v4';\r\nimport './JokesList.css';\r\nimport Joke from './Joke';\r\n\r\nexport default class JokesList extends Component {\r\n   static defaultProps = {\r\n      numJokesToGet: 10\r\n   }\r\n\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         //if local storage has jokes, fetch them, otherwise make jokes and empty array []\r\n         jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\")\r\n      };\r\n\r\n      this.seenJokes = new Set(this.state.jokes.map(j => j.text));\r\n\r\n      this.handleClick = this.handleClick.bind(this);\r\n   }\r\n\r\n   componentDidMount() {\r\n      if (this.state.jokes.length === 0) {\r\n         this.setState({ loading: true });\r\n         this.getJokes();\r\n      }\r\n   }\r\n\r\n   async getJokes() {\r\n      try {\r\n         let jokes = [];\r\n         while (jokes.length < this.props.numJokesToGet) {\r\n            let response = await axios.get(\"https://icanhazdadjoke.com/\", { headers: { Accept: \"application/json\" } });\r\n            let newJoke = response.data.joke;\r\n\r\n            if (!this.seenJokes.has(newJoke)) {\r\n               jokes.push({ id: uuid(), text: newJoke, votes: 0 });\r\n            }\r\n         }\r\n         this.setState(st => ({\r\n            loading: false, jokes: [...st.jokes, ...jokes]\r\n         }), () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n         );\r\n      } catch (err) {\r\n         alert(err);\r\n         this.setState({ loading: false });\r\n      }\r\n   }\r\n\r\n   handleClick() {\r\n      this.setState({ loading: true }, this.getJokes);\r\n   }\r\n\r\n   handleVotes(id, delta) {\r\n      this.setState(st => ({\r\n         jokes: st.jokes.map(j => (\r\n            j.id === id ? { ...j, votes: j.votes + delta } : j\r\n         ))\r\n      }), () => window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\r\n      );\r\n   }\r\n\r\n   render() {\r\n      let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes).map(j => (\r\n         <Joke\r\n            key={j.id}\r\n            text={j.text}\r\n            votes={j.votes}\r\n            upvote={() => this.handleVotes(j.id, 1)}\r\n            downvote={() => this.handleVotes(j.id, -1)}\r\n         />\r\n      ));\r\n\r\n      let spinner = <div className=\"JokesList-spinner\">\r\n         <i className=\"far fa-8x fa-laugh fa-spin\" />\r\n         <h1 className=\"JokesList-title\">Loading...</h1>\r\n      </div>;\r\n\r\n      return (\r\n         <div className=\"JokesList\">\r\n            <div className=\"JokesList-sidebar\">\r\n               <h1 className=\"JokesList-title\"><span>Dad</span> Jokes</h1>\r\n               <img src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg' alt=\"sidebar emoji\" />\r\n               <button className=\"JokesList-getmore\" onClick={this.handleClick}>More Jokes</button>\r\n            </div>\r\n            <div className=\"JokesList-jokes\">\r\n               {this.state.loading ? (\r\n                  <div className=\"JokesList-spinner-container\">\r\n                     {spinner}\r\n                  </div>\r\n               ) : (<div>{jokes}</div>)}\r\n\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n};","import React from 'react';\nimport './App.css';\nimport JokesList from './JokesList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokesList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}